// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// corels
bool corels(std::string rules_file, std::string labels_file, std::string log_dir, std::string meta_file, bool run_bfs, bool calculate_size, bool run_curiosity, int curiosity_policy, bool latex_out, int map_type, std::string verbosity_policy, int max_num_nodes, double regularization, int logging_frequency, int ablation);
RcppExport SEXP _RcppCorels_corels(SEXP rules_fileSEXP, SEXP labels_fileSEXP, SEXP log_dirSEXP, SEXP meta_fileSEXP, SEXP run_bfsSEXP, SEXP calculate_sizeSEXP, SEXP run_curiositySEXP, SEXP curiosity_policySEXP, SEXP latex_outSEXP, SEXP map_typeSEXP, SEXP verbosity_policySEXP, SEXP max_num_nodesSEXP, SEXP regularizationSEXP, SEXP logging_frequencySEXP, SEXP ablationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type rules_file(rules_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type labels_file(labels_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type log_dir(log_dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type meta_file(meta_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type run_bfs(run_bfsSEXP);
    Rcpp::traits::input_parameter< bool >::type calculate_size(calculate_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type run_curiosity(run_curiositySEXP);
    Rcpp::traits::input_parameter< int >::type curiosity_policy(curiosity_policySEXP);
    Rcpp::traits::input_parameter< bool >::type latex_out(latex_outSEXP);
    Rcpp::traits::input_parameter< int >::type map_type(map_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type verbosity_policy(verbosity_policySEXP);
    Rcpp::traits::input_parameter< int >::type max_num_nodes(max_num_nodesSEXP);
    Rcpp::traits::input_parameter< double >::type regularization(regularizationSEXP);
    Rcpp::traits::input_parameter< int >::type logging_frequency(logging_frequencySEXP);
    Rcpp::traits::input_parameter< int >::type ablation(ablationSEXP);
    rcpp_result_gen = Rcpp::wrap(corels(rules_file, labels_file, log_dir, meta_file, run_bfs, calculate_size, run_curiosity, curiosity_policy, latex_out, map_type, verbosity_policy, max_num_nodes, regularization, logging_frequency, ablation));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppCorels_corels", (DL_FUNC) &_RcppCorels_corels, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppCorels(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
